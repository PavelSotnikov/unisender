////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ Работа с API веб-сервиса Unisender:
//
// Реализованы методы работы с самим сервером
// и методы, упрощающие работы из УТ 11
//
//////////////////////////////////////////////////////////////////////////////// 

#Область ПрограммныйИнтерфейс

#Область МетодыUnisender

// Возвращает структуру содержащую все списки рассылки с сайта unisender
//
// Возвращаемое значение: 
// Структура - структура, в свойстве результат массив структур name, id
//
Функция getLists() Экспорт
	
	ИмяСкрипта	= "/getLists";
	СтрокаЗапросаНаСервер	= "?format=json&api_key=" + КлючАпи();
	СтрокаОтветаСервера		= ЗапросНаСервер(ИмяСкрипта, СтрокаЗапросаНаСервер);
	Ошибка		= Ложь;
	текстОшибки	= "";
	СтруктураСпискиРассылки	= РазобратьОтветСервера(СтрокаОтветаСервера, Ошибка, текстОшибки);	
	
	Возврат СтруктураСпискиРассылки;
	
КонецФункции

// Создает на сайте unisender список с переданным наименованием,
// возвращает код созданного списка
//
// Параметры:
// Наименование - Строка - Наименование создаваемого списка
//
// Возвращаемое значение: 
//  Число - код созданного листа
//
Функция createList(Наименование) Экспорт
	ИмяСкрипта	= "/createList";
	ШаблонСтрокиЗапроса		= "format=json&api_key=%1&title=%2";           
	СтрокаЗапросаНаСервер	= СтрШаблон(ШаблонСтрокиЗапроса, КлючАпи(), Наименование);
	СтрокаОтветаСервера		= ЗапросНаСервер(ИмяСкрипта, СтрокаЗапросаНаСервер);
	Ошибка		= Ложь;
	текстОшибки	= "";
	СтруктураОтвета	= РазобратьОтветСервера(СтрокаОтветаСервера, Ошибка, текстОшибки);	
	КодЛиста		= "";
	Если НЕ Ошибка Тогда
		КодЛиста	= СтруктураОтвета.Результат.id;
	КонецЕсли; 	
	Возврат КодЛиста;
КонецФункции

// Запрашивает на сайте существующие данные по контактам
//
// Параметры:
//
// Возвращаемое значение: 
//
Функция exportContacts(КодЛиста) Экспорт	
	ИмяСкрипта		= "/async/exportContacts";
	ШаблонСтрокиЗапроса		= "format=json&api_key=%1" + ?(ЗначениеЗаполнено(КодЛиста), "&list_id=%2", "");
	СтрокаЗапросаНаСервер	= СтрШаблон(ШаблонСтрокиЗапроса, КлючАпи(), КодЛиста);
	СтрокаОтветаСервера		= ЗапросНаСервер(ИмяСкрипта, СтрокаЗапросаНаСервер);
	Ошибка		= Ложь;
	текстОшибки	= "";
	СтруктураОтвета	= РазобратьОтветСервера(СтрокаОтветаСервера, Ошибка, текстОшибки);	
	ИдЗадачи		= "";
	Если НЕ Ошибка Тогда
		ИдЗадачи	= СтруктураОтвета.Результат.task_uuid;
	КонецЕсли; 
	Возврат ИдЗадачи;
КонецФункции

// Обновляет данные контактов и листов на сайте Unisender
//
// Параметры:
// ТаблицаАдресов - Таблица в которой содержатся данные для обновления
//
// Возвращаемое значение: 
// Булево - успешность выполнения
//
Функция importContacts(ТаблицаАдресов, overwrite_lists = Ложь) Экспорт
	ИмяСкрипта		= "/importContacts";
	СтрокаЗапросаНаСервер	= СтрокаЗапросаImportContacts(ТаблицаАдресов, overwrite_lists);
	СтрокаОтветаСервера		= ЗапросНаСервер(ИмяСкрипта, СтрокаЗапросаНаСервер);
	Ошибка		= Ложь;
	текстОшибки	= "";
	СтруктураОтвета	= РазобратьОтветСервера(СтрокаОтветаСервера, Ошибка, текстОшибки);	
	Успешно			= Не Ошибка;	
	Возврат Успешно;
КонецФункции

// Получает результат выполнения асинхронной задачи
//
// Параметры:
//  КодЗадачи - строка/число - полученные из задания
//
// Возвращаемое значение:
//  строка - ссылка на файл для скачивания
Функция getTaskResult(КодЗадачи) Экспорт
	ИмяСкрипта	= "async/getTaskResult";
	ШаблонСтрокиЗапроса		= "format=json&api_key=%1&task_uuid=%2";
	СтрокаЗапросаНаСервер	= СтрШаблон(ШаблонСтрокиЗапроса, КлючАпи(), КодЗадачи);
	
	СсылкаНаФайл		= "";
	Пока Истина Цикл
		СтрокаОтветаСервера		= ЗапросНаСервер(ИмяСкрипта, СтрокаЗапросаНаСервер);
		Ошибка		= Ложь;
		текстОшибки	= "";
		СтруктураОтвета	= РазобратьОтветСервера(СтрокаОтветаСервера, Ошибка, текстОшибки);	
		Если НЕ Ошибка Тогда
			Если СтруктураОтвета.Результат.status = "completed" Тогда
				СсылкаНаФайл	= СтруктураОтвета.Результат.file_to_download;
				Прервать;
			КонецЕсли; 
		КонецЕсли; 			
	КонецЦикла; 
	Возврат СсылкаНаФайл;
КонецФункции
 

#КонецОбласти 

#Область РаботаСУТПрограммныйИнтерфейс

// Обновление данных по Списку рассылки с переданным кодом, массивом адресов
//
// Параметры:
// МассивГруппРассылок - массив - массив с электронными адресами
// КодСпискаРассылки - строка/число - код обновляемой рассылки
//
// Возвращаемое значение: 
//
Процедура ОбновитьДанныеСпискаРассылки(МассивГруппРассылок, КодСпискаРассылки) Экспорт
	ОбновитьДанныеСпискаРассылкиНаСайте(МассивГруппРассылок, КодСпискаРассылки);
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область РаботаСUnisender
Функция СтрокаЗапросаImportContacts(ТаблицаАдресов, overwrite_lists = Ложь)
	ШаблонСтрокиЗапроса		= "format=json&api_key=%1&overwrite_lists=%2";
	ШаблонОписанияПоля		= "&field_names[%1]=%2";
	ШаблонОписанияДанных	= "&data[%1][%2]=%3";
	СтрокаЗапроса			= СтрШаблон(ШаблонСтрокиЗапроса, КлючАПИ(), ?(overwrite_lists, "1", "0"));
	
	Колонки				= ТаблицаАдресов.Колонки;
	КоличествоКолонок	= Колонки.Количество();
	
	Для инд = 0 По КоличествоКолонок - 1 Цикл
		стр				= Колонки[инд].Имя;
		СтрокаЗапроса	= СтрокаЗапроса + СтрШаблон(ШаблонОписанияПоля, инд, стр);
	КонецЦикла; 
	
	индСтр	= 0;	
	Для каждого стр Из ТаблицаАдресов Цикл		
		Для индКол = 0 По КоличествоКолонок - 1 Цикл 
			Данные	= стр[индКол];
			Если ЗначениеЗаполнено(Данные) Тогда
				Если ТипЗнч(данные) = Тип("Булево") Тогда
					стрДанные	    = ?(Данные, "true", "false");
					СтрокаЗапроса	= строкаЗапроса + СтрШаблон(ШаблонОписанияДанных, индСтр, индКол, стрДанные);
				Иначе
					СтрокаЗапроса 	= строкаЗапроса + СтрШаблон(ШаблонОписанияДанных, индСтр, индКол, Данные);
				КонецЕсли; 				
			КонецЕсли; 			
		КонецЦикла;		
		индСтр	= индСтр + 1;
	КонецЦикла; 
	
	Возврат СтрокаЗапроса;
КонецФункции

#КонецОбласти 

#Область РаботаСУТ
Функция ТекстЗапросаАдресаРассылкиПоМассивуГруппРассылок()
	ЗапросТекст = "ВЫБРАТЬ
	              |	ГруппыРассылокИОповещений.Ссылка КАК ГруппаРассылки
	              |ПОМЕСТИТЬ ВТГруппыРассылок
	              |ИЗ
	              |	Справочник.ГруппыРассылокИОповещений КАК ГруппыРассылокИОповещений
	              |ГДЕ
	              |	ГруппыРассылокИОповещений.Ссылка в (&МассивГруппРассылок)
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ПодпискиНаРассылкиИОповещенияКлиентам.Владелец КАК Подписчик,
	              |	ПодпискиНаРассылкиИОповещенияКлиентам.Владелец КАК АдресатПодписки,
	              |	ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИПартнераДляПисем КАК ВидКонтактнойИнформацииДляПисем,
	              |	ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИПартнераДляSMS КАК ВидКонтактнойИнформацииДляSMS,
	              |	ЕСТЬNULL(ПартнерыКонтактнаяИнформацияEmail.Представление, """") КАК АдресЭП,
	              |	ЕСТЬNULL(ПартнерыКонтактнаяИнформацияSMS.Представление, """") КАК НомерТелефона,
	              |	0 КАК ЗначениеУпорядочивания,
	              |	ПодпискиНаРассылкиИОповещенияКлиентам.КоличествоКонтактныхЛицАдресатов КАК КоличествоДопАдресатов,
	              |	ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьПартнеру КАК ОтправлятьПартнеру,
	              |	ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьКонтактномуЛицуОбъектаОповещения КАК ОтправлятьКонтактномуЛицуОбъектаОповещения,
	              |	ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИКонтактногоЛицаОбъектаОповещенияДляПисем КАК ВидКИКонтактногоЛицаОбъектаОповещенияДляПисем,
	              |	ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИКонтактногоЛицаОбъектаОповещенияДляSMS КАК ВидКИКонтактногоЛицаОбъектаОповещенияДляSMS,
	              |	ПодпискиНаРассылкиИОповещенияКлиентам.Ссылка КАК Подписка,
	              |	Партнеры.Наименование КАК ПодписчикНаименование
	              |ИЗ
	              |	Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформацияEmail
	              |		ПО ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИПартнераДляПисем = ПартнерыКонтактнаяИнформацияEmail.Вид
	              |			И ПодпискиНаРассылкиИОповещенияКлиентам.Владелец = ПартнерыКонтактнаяИнформацияEmail.Ссылка
	              |			И (ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьПартнеру)
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформацияSMS
	              |		ПО ПодпискиНаРассылкиИОповещенияКлиентам.ВидКИПартнераДляSMS = ПартнерыКонтактнаяИнформацияSMS.Вид
	              |			И ПодпискиНаРассылкиИОповещенияКлиентам.Владелец = ПартнерыКонтактнаяИнформацияSMS.Ссылка
	              |			И (ПодпискиНаРассылкиИОповещенияКлиентам.ОтправлятьПартнеру)
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	              |		ПО ПодпискиНаРассылкиИОповещенияКлиентам.Владелец = Партнеры.Ссылка
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГруппыРассылок КАК ВТГруппыРассылок
	              |		ПО ПодпискиНаРассылкиИОповещенияКлиентам.ГруппаРассылокИОповещений = ВТГруппыРассылок.ГруппаРассылки
	              |ГДЕ
	              |	НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления
	              |	И ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	ПодпискиНаРассылкиИОповещенияКлиентам.Владелец,
	              |	ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.КонтактноеЛицо,
	              |	ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.ВидКИДляПисем,
	              |	ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.ВидКИДляSMS,
	              |	ЕСТЬNULL(КонтактныеЛицаПартнеровКонтактнаяИнформацияEmail.Представление, """"),
	              |	ЕСТЬNULL(КонтактныеЛицаПартнеровКонтактнаяИнформацияSMS.Представление, """"),
	              |	1,
	              |	0,
	              |	ЛОЖЬ,
	              |	ЛОЖЬ,
	              |	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка),
	              |	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка),
	              |	ПодпискиНаРассылкиИОповещенияКлиентам.Ссылка,
	              |	Партнеры.Наименование
	              |ИЗ
	              |	Справочник.ПодпискиНаРассылкиИОповещенияКлиентам.КонтактныеЛица КАК ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодпискиНаРассылкиИОповещенияКлиентам КАК ПодпискиНаРассылкиИОповещенияКлиентам
	              |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	              |			ПО ПодпискиНаРассылкиИОповещенияКлиентам.Владелец = Партнеры.Ссылка
	              |		ПО ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.Ссылка = ПодпискиНаРассылкиИОповещенияКлиентам.Ссылка
	              |			И (НЕ ПодпискиНаРассылкиИОповещенияКлиентам.ПометкаУдаления)
	              |			И (ПодпискиНаРассылкиИОповещенияКлиентам.ПодпискаДействует)
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформацияSMS
	              |		ПО ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.ВидКИДляSMS = КонтактныеЛицаПартнеровКонтактнаяИнформацияSMS.Вид
	              |			И ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.КонтактноеЛицо = КонтактныеЛицаПартнеровКонтактнаяИнформацияSMS.Ссылка
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформацияEmail
	              |		ПО ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.КонтактноеЛицо = КонтактныеЛицаПартнеровКонтактнаяИнформацияEmail.Ссылка
	              |			И ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.ВидКИДляПисем = КонтактныеЛицаПартнеровКонтактнаяИнформацияEmail.Вид
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГруппыРассылок КАК ВТГруппыРассылок
	              |		ПО ПодпискиНаРассылкиИОповещенияКлиентамКонтактныеЛица.Ссылка.ГруппаРассылокИОповещений = ВТГруппыРассылок.ГруппаРассылки
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	ПодписчикНаименование,
	              |	ЗначениеУпорядочивания";
	
	Возврат ЗапросТекст;
КонецФункции

Функция МассивАдресовПоМассивуГруппРассылок(МассивГруппРассылок)
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаАдресаРассылкиПоМассивуГруппРассылок();	
	Запрос.УстановитьПараметр("МассивГруппРассылок", МассивГруппРассылок);
	РезультатЗапроса 	= Запрос.Выполнить();
	ТаблицаРезультат	= РезультатЗапроса.Выгрузить();
	ТаблицаРезультат.Свернуть("АдресЭП");
	МассивАдресов		= ТаблицаРезультат.ВыгрузитьКолонку("АдресЭП");
	Возврат МассивАдресов;
КонецФункции

Функция ТаблицаАдресовОбновленияПодписки()
	Таблица		= Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("email");
	Таблица.Колонки.Добавить("email_status");
	Таблица.Колонки.Добавить("email_list_ids");
	Таблица.Колонки.Добавить("email_unsubscribed_list_ids");
	
	Возврат Таблица;
КонецФункции

Функция ТаблицаАдресовДляИмпортаРассылкиНаСайт(КодСпискаРассылки, МассивАдресовПодписки = Неопределено, МассивАдресовОтписки = Неопределено, СтатусПоУмолчанию = "")
	ТаблицаАдресов		= ТаблицаАдресовОбновленияПодписки();
	Если МассивАдресовПодписки <> Неопределено Тогда
		Для каждого Адрес Из МассивАдресовПодписки Цикл
			стр	= ТаблицаАдресов.Добавить();
			стр.email						= Адрес;
			стр.email_status				= СтатусПоУмолчанию;
			стр.email_list_ids				= КодСпискаРассылки;
			стр.email_unsubscribed_list_ids	= "";
		КонецЦикла; 		
	КонецЕсли; 
	Если МассивАдресовОтписки <> Неопределено Тогда
		Для каждого Адрес Из МассивАдресовОтписки Цикл
			стр	= ТаблицаАдресов.Добавить();
			стр.email						= Адрес;
			стр.email_status				= СтатусПоУмолчанию;
			стр.email_list_ids				= "";
			стр.email_unsubscribed_list_ids	= КодСпискаРассылки;		
		КонецЦикла; 		
	КонецЕсли; 
	Возврат ТаблицаАдресов;
КонецФункции

Функция ТаблицаИзCSV(ИмяФайла, Разделитель = ",")
	Таблица	= Новый ТаблицаЗначений;	

	// чтение
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(ИмяФайла, КодировкаТекста.UTF8);	
	ТекстФайла		= ЗагружаемыйФайл.ПолучитьТекст();
	МассивСтрок		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстФайла, Символы.ПС);
	
	Шапка = МассивСтрок[0] ;
	
	// раскладываем строку в массив            	
	МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Шапка, Разделитель); // процедура из типовой конфигурации, разбивает строку в массив по разделителям

	// генерируем столбцы
	Для Каждого ИмяСтолбца Из МассивКол Цикл		
		ИмяБезПробелов = СтрЗаменить(ИмяСтолбца, " ", ""); // убираем из имени пробелы
		Таблица.Колонки.Добавить(ИмяБезПробелов, , ИмяСтолбца);
	КонецЦикла;
	
	Для НомерСтроки = 1 По МассивСтрок.Количество() - 1 Цикл
		
		// получить стрoку с указанным номером и преобразуем её в массив
		Строка = МассивСтрок[НомерСтроки];
		Если Не ЗначениеЗаполнено(Строка) Тогда
			Продолжить;
		КонецЕсли; 
		
		МассивКол = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка, Разделитель); // процедура из типовой конфигурации, разбивает строку в массив по разделителям
		НоваяСтрочка = Таблица.Добавить();
		
		Если МассивКол.Количество() <> Таблица.Колонки.Количество() Тогда
			Продолжить; // скорее всего в тексте содержит разделитель
		КонецЕсли;
		
		Для НомерСтолбца = 1 По МассивКол.Количество() Цикл
			// заполняем строчку значениями
			ТекущееЗначение = МассивКол[НомерСтолбца - 1];
			ИмяКолонки = Таблица.Колонки[НомерСтолбца - 1].Имя;
			НоваяСтрочка[ИмяКолонки] = ТекущееЗначение;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Таблица;
КонецФункции

Функция МассивАдресовИзФайла(ИмяФайла)
	ТаблицаДанных	= ТаблицаИзCSV(ИмяФайла);
	МассивАдресов	= ТаблицаДанных.ВыгрузитьКолонку("email");
	Возврат МассивАдресов;
КонецФункции


// возвращает список адресов списка рассылки с сайта
// Параметры:
//  КодСпискаРассылки - строка
// Возвращаемое значение:
//  Массив - массив адресов списка рассылки
Функция МассивАдресовСпискаРассылки(КодСпискаРассылки)
	КодЗадачи		= exportContacts(КодСпискаРассылки);	
	СсылкаНаФайл	= getTaskResult(КодЗадачи);
	ИмяФайла		= ПолучитьИмяВременногоФайла("txt");
	ЗагрузитьФайлИзИнтернета(СсылкаНаФайл, ИмяФайла);
	МассивАдресов	= МассивАдресовИзФайла(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	Возврат МассивАдресов;
КонецФункции

Функция МассивыАдресовПодпискиОтписки(МассивАдресовРассылки, МассивАдресовРассылкиСайт)
	МассивАдресовДляПодписки	= Новый Массив;
	МассивАдресовДляОтписки		= Новый Массив;
	Для каждого Адрес Из МассивАдресовРассылки Цикл
		Если Адрес = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивАдресовРассылкиСайт.Найти(Адрес) = Неопределено Тогда
			МассивАдресовДляПодписки.Добавить(Адрес);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого Адрес Из МассивАдресовРассылкиСайт Цикл
		Если Адрес = "" Тогда
			Продолжить;
		КонецЕсли;		
		Если МассивАдресовРассылки.Найти(Адрес) = Неопределено Тогда
			МассивАдресовДляОтписки.Добавить(Адрес);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Новый Структура("МассивАдресовДляПодписки, МассивАдресовДляОтписки", МассивАдресовДляПодписки, МассивАдресовДляОтписки);
	
КонецФункции
 
Процедура ОбновитьДанныеСпискаРассылкиНаСайте(МассивГруппРассылок, КодСпискаРассылки) Экспорт
	МассивАдресовРассылки	= МассивАдресовПоМассивуГруппРассылок(МассивГруппРассылок);
	Если МассивАдресовРассылки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Список рассылки не содержит адресов эл.почты");
		Возврат;
	КонецЕсли; 
	
	МассивАдресовРассылкиСайт	= МассивАдресовСпискаРассылки(КодСпискаРассылки);
	
	СтруктураМассивов			= МассивыАдресовПодпискиОтписки(МассивАдресовРассылки, МассивАдресовРассылкиСайт);
	МассивАдресовДляПодписки	= СтруктураМассивов.МассивАдресовДляПодписки;
	МассивАдресовДляОтписки		= СтруктураМассивов.МассивАдресовДляОтписки;
	
	
	ТаблицаАдресов	= ТаблицаАдресовДляИмпортаРассылкиНаСайт(КодСпискаРассылки, МассивАдресовДляПодписки, МассивАдресовДляОтписки, "active");
	importContacts(ТаблицаАдресов, Ложь);
	
КонецПроцедуры
  
#КонецОбласти 





#Область Служебные

Функция JSONИзСтруктуры(структураДанных) Экспорт
	Запись	= Новый ЗаписьJSON;
	Запись.УстановитьСтроку();	
	Запись.ПроверятьСтруктуру	= Истина;
	
	ЗаписатьJSON(Запись, структураДанных);
	Результат	= Запись.Закрыть();
	
	Возврат Результат;
КонецФункции

Функция СтруктураИзJSON(текстЗапроса, МассивДат = "", ФорматДаты = Неопределено) Экспорт
	Если ФорматДаты = Неопределено Тогда
		ФорматДаты	= ФорматДатыJSON.ISO;
	КонецЕсли; 
	ЧтениеJSON	= Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(текстЗапроса);
	Структура	= ПрочитатьJSON(ЧтениеJSON, Ложь, МассивДат, ФорматДаты);
	ЧтениеJSON.Закрыть();
	
	Возврат Структура;
КонецФункции

&НаСервере
Функция ЗапросНаСервер(ИмяСкрипта, СтрокаЗапроса) Экспорт
	АдресСервера	= Справочники.Д_Константы.UnisenderАдрес.Значение;
    ЗаголовокHTTP = Новый Соответствие();
    ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
    ЗаголовокHTTP.Вставить("Accept-Language", "ru");
    ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
    ЗаголовокHTTP.Вставить("Content-Language", "ru");
    ЗаголовокHTTP.Вставить("Content-Charset", "utf-8");
	
	Соединение	= Новый HTTPСоединение(АдресСервера, , , , , 300, Новый ЗащищенноеСоединениеOpenSSL);
	Запрос		= Новый HTTPЗапрос(ИмяСкрипта, ЗаголовокHTTP);
	Запрос.УстановитьТелоИзСтроки(СтрокаЗапроса, "UTF-8", ИспользованиеByteOrderMark.НеИспользовать);
	                         
	Ответ	= Соединение.ОтправитьДляОбработки(Запрос);
	строкаОтветаСервера	= Ответ.ПолучитьТелоКакСтроку();
	Возврат строкаОтветаСервера;
КонецФункции

Функция КлючАпи() Экспорт
	
	Если Метаданные.НайтиПоПолномуИмени("Справочник.Д_Константы") <> неопределено Тогда
		КлючАПИ	= СокрЛП(Справочники.Д_Константы.UnisenderКлюч.Пароль);
	КонецЕсли; 
	
	Возврат КлючАПИ;
КонецФункции

Функция РазобратьОтветСервера(СтрокаОтветаСервера, Ошибка = Ложь, текстОшибки = "")
	СтруктураОтветаСервера	= СтруктураИзJSON(СтрокаОтветаСервера);
	Если СтруктураОтветаСервера.Свойство("result") Тогда
		Ответ	= Новый Структура("Результат", СтруктураОтветаСервера.result);
	ИначеЕсли СтруктураОтветаСервера.Свойство("error") Тогда
		Ответ	= Неопределено;
		Ошибка	= Истина;
		текстОшибки	= СтруктураОтветаСервера.error;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(текстОшибки);
	Иначе
		Ответ	= Неопределено;
		Ошибка	= Истина;
		текстОшибки	= "Неизвестная ошибка. " + СтрокаОтветаСервера;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(текстОшибки);
	КонецЕсли; 
	
	Возврат Ответ;
КонецФункции

Процедура ЗагрузитьФайлИзИнтернета(АдресФайлаВИнтернете, АдресФайлаНаКлиенте)
	
	Если Найти(НРег(АдресФайлаВИнтернете), "https://") = 1 Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	// "http://static.1c.ru/images/logo.png" -> "static.1c.ru/images/logo.png"
	АдресБезHTTP = СтрЗаменить(АдресФайлаВИнтернете, "//", Символы.ПС);
	АдресБезHTTP = СтрПолучитьСтроку(АдресБезHTTP, СтрЧислоСтрок(АдресБезHTTP));
	
	// "static.1c.ru/images/logo.png" -> "static.1c.ru"
	АдресСервера = СтрПолучитьСтроку(СтрЗаменить(АдресБезHTTP, "/", Символы.ПС), 1);
	
	// "static.1c.ru/images/logo.png" -> "/images/logo.png"
	ПутьКФайлуВнутриДомена = Сред(АдресБезHTTP, Найти(АдресБезHTTP, "/"));
	
	// скачиваем на диск
	Соединение = Новый HTTPСоединение(АдресСервера, , , , , 3, ЗащищенноеСоединение);
	Соединение.Получить(ПутьКФайлуВнутриДомена, АдресФайлаНаКлиенте);	
	
КонецПроцедуры
 
#КонецОбласти 

#КонецОбласти


 
